---
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faDesktop,
  faTabletScreenButton,
  faMobileScreenButton,
  faCloud,
  faServer,
} from "@fortawesome/free-solid-svg-icons";
---

<div>
  <h2>More experience than you can shake a stick at</h2>
  <p>
    I've had the privilege to work in a range of companies in varied industries.
    I've created outstanding software aimed at wildly different audiences, from
    a single user to millions of concurrent users.
  </p>
  <p>
    Throughout the numerous projects I've worked on, I've gained experience in
    designing and implementing a wide variety of different architectures. I
    embrace building modular components that are reusable, extensible, and easy
    to test.
  </p>
  <p>
    Often the most difficult question to answer is "What do you want to see and
    do?". So during design and development I work with users to figure out what
    they need.
  </p>
  <p>This is why I create software that is scalable, secure, and robust.</p>
</div>
<div id="scalable" class="diagram">
  <div class="multiple">
    <FontAwesomeIcon class="icon" fixedWidth icon={faDesktop} />
    <FontAwesomeIcon class="icon icon-md" fixedWidth icon={faTabletScreenButton}
    />
    <FontAwesomeIcon class="icon icon-sm" fixedWidth icon={faMobileScreenButton}
    />
  </div>
  <div class="center">
    <FontAwesomeIcon class="icon" fixedWidth icon={faCloud} />
  </div>
  <div class="multiple">
    <FontAwesomeIcon class="icon" fixedWidth icon={faServer} />
    <FontAwesomeIcon
      class="icon server-to-appear server-appear-late"
      fixedWidth
      icon={faServer}
    />
    <FontAwesomeIcon class="icon server-to-appear" fixedWidth icon={faServer} />
    <FontAwesomeIcon class="icon" fixedWidth icon={faServer} />
  </div>
</div>

<script>
  const serversAppears = document.getElementsByClassName("server-to-appear");
  const animateServers = (entries) => {
    let shouldAnimate = false;
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        shouldAnimate = true;
      }
    });
    if (shouldAnimate) {
      for (let i = 0; i < serversAppears.length; i++) {
        serversAppears[i].classList.add("server-appear");
      }
    } else {
      for (let i = 0; i < serversAppears.length; i++) {
        serversAppears[i].classList.remove("server-appear");
      }
    }
  };

  const scalableObserver = new IntersectionObserver(animateServers);
  scalableObserver.observe(document.getElementById("scalable"));
</script>

<style>
  .server-to-appear {
    width: 0;
    opacity: 0;
  }

  .server-appear {
    animation-name: server-load;
    animation-duration: 2s;
    animation-delay: 1s;
    animation-fill-mode: forwards;
  }

  .server-appear-late {
    animation-delay: 1.5s;
  }

  @keyframes server-load {
    0% {
      margin-top: 10rem;
      width: 0;
      opacity: 0;
    }
    100% {
      margin-top: 0;
      width: var(--width);
      opacity: 1;
    }
  }
</style>
